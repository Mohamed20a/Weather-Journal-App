{"version":3,"sources":["app.js"],"names":["docTitle","document","title","window","addEventListener","url","API_KEY","button","getElementById","zip","feelings","date","temp","content","d","Date","newDate","getMonth","getDate","getFullYear","fetchWeather","baseURL","apiKey","fetch","api","json","result","main","saveData","path","data","method","headers","body","JSON","stringify","updateUI","temperature","innerText","Math","floor","value","then","e","alert"],"mappings":"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","sourcesContent":["/* Global Variables */\n\nlet docTitle = document.title;\n\nwindow.addEventListener(\"blur\", () => {\n  document.title = \"Come Back :(\";\n})\n\nwindow.addEventListener(\"focus\", () => {\n  document.title = docTitle;\n})\n\n\n// OpenWeatherApi configuration\nconst url = 'https://api.openweathermap.org/data/2.5/weather'\n// My Api Kay \nconst API_KEY= '50883ea96de0d5a374b6bd4583d75116'\n\n// HTML element to listen for click events\nconst button = document.getElementById('generate')\n\n// HTML elements to get the values\nconst zip = document.getElementById('zip')\nconst feelings = document.getElementById('feelings')\n\n// HTML elements to update dynamically\nconst date = document.getElementById('date')\nconst temp = document.getElementById('temp')\nconst content = document.getElementById('content')\n\n// Create a new date instance dynamically with JS\nlet d = new Date()\nlet newDate = d.getMonth() + '.' + d.getDate() + '.' + d.getFullYear()\n\n// Fetch Weather Data from OpenWeatherApi\nconst fetchWeather = async (baseURL, zip, apiKey) => {\n  try {\n    const api = await fetch(\n      `${baseURL}?zip=${zip},us&units=metric&APPID=${apiKey}`,\n    )\n    const result = await api.json()\n    // destructuring of the result object\n    const {\n      main: {temp},\n    } = result\n    return temp\n  } catch (e) {\n    throw e\n  }\n}\n\n// POST Request to store date, temp and user input\nconst saveData = async (path, data) => {\n  try {\n    await fetch(path, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n  } catch (e) {\n    throw e\n  }\n}\n\n// Update UI dynamically\nconst updateUI = async (temperature, newDate, feelings) => {\n  date.innerText = `Date: ${newDate}`\n  // Calculating temperature without a decimal number\n  temp.innerText = `Temp: ${Math.floor(temperature )} °C`\n  content.innerText = `Feel: ${feelings}`\n}\n\n// Event listener\nbutton.addEventListener('click', () => {\n  // The Result Of Click\n  fetchWeather(url, zip.value, API_KEY)\n    .then(temp => {\n      \n      return {date: newDate, temp, content: feelings.value}\n      \n    })\n    .then(data => {\n      saveData('/api/projectData', data)\n      return data\n    })\n    .then(({temp, date, content}) => updateUI(temp, date, content))\n    .catch(e => {\n      // There can be proper error handling with UI\n      // Error Massage Alert\n      alert('Please Enter Zip Code ♡', e)\n    })\n})"],"file":"app.dev.js"}
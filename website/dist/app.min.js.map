{"version":3,"sources":["app.js"],"names":["docTitle","document","title","window","addEventListener","url","API_KEY","button","getElementById","content","feelings","date","fetchWeather","d","Date","newDate","getMonth","getDate","getFullYear","baseURL","zip","apiKey","api","result","_temp","regeneratorRuntime","async","_context","prev","next","awrap","fetch","concat","sent","json","temp","main","abrupt","t0","stop","saveData","path","data","_context2","method","headers","Content-Type","body","JSON","stringify","updateUI","temperature","_context3","innerText","Math","floor","value","then","_ref","e","alert"],"mappings":"aAAA,IAAAA,SAAAC,SAAAC,MAIAC,OAAOC,iBAAiB,OAAQ,WAC9BH,SAASC,MAAQ,iBAIjBD,OAAAA,iBAAiBD,QAAjB,WADFC,SAKAC,MAAAF,WACA,IAAMK,IAAM,kDAENC,QAAS,mCAGTC,OAASN,SAASO,eAAe,YASjCC,IAAOR,SAAGA,eAASO,OALnBE,SAAWT,SAASO,eAAe,YAGnCG,KAAOV,SAASO,eAAe,QAS/BI,KAAAA,SAAeJ,eAAfI,QAAeH,QAAAR,SAAAO,eAAA,WAAAK,EAAA,IAAAC,KAAAC,QAAAF,EAAAG,WAAA,IAAAH,EAAAI,UAAA,IAAAJ,EAAAK,cAAAN,aAAA,SAAAO,EAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAAAJ,mBAAAK,MAECC,MAAK,GAAAC,OAFNb,EAEM,SAAAa,OAFNZ,EAEM,2BAAAY,OAFNX,KAAA,KAAA,EAAA,OAEXC,EAFWK,EAAAM,KAAAN,EAAAE,KAAA,EAAAJ,mBAAAK,MAAAR,EAAAY,QAAA,KAAA,EAAA,OAAAX,EAAAI,EAAAM,KAAAE,EAKXZ,EALWa,KAAAD,KAAAR,EAAAU,OAAA,SAMjBF,GANiB,KAAA,GAAA,MAAAR,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,MAAA,GAAAA,EAAAW,GAAA,KAAA,GAAA,IAAA,MAAA,OAAAX,EAAAY,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAAAC,SAAA,SAAAC,EAAAC,GAAA,OAAAjB,mBAAAC,MAAA,SAAAiB,GAAA,OAAA,OAAAA,EAAAf,KAAAe,EAAAd,MAAA,KAAA,EAAA,OAAAc,EAAAf,KAAA,EAAAe,EAAAd,KAAA,EAAAJ,mBAAAK,MAAAC,MAAAU,EAAA,CAAAG,OAAA,OAAAC,QAAA,CAAAC,eAAA,oBAAAC,KAAAC,KAAAC,UAAAP,MAAA,KAAA,EAAAC,EAAAd,KAAA,EAAA,MAAA,KAAA,EAAA,MAAAc,EAAAf,KAAA,EAAAe,EAAAL,GAAAK,EAAA,MAAA,GAAAA,EAAAL,GAAA,KAAA,EAAA,IAAA,MAAA,OAAAK,EAAAJ,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,MAiBJW,SAAA,SAAAC,EAAApC,EAAAL,GAAA,OAAAe,mBAAAC,MAAA,SAAA0B,GAAA,OAAA,OAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,KAAA,EAAAlB,KAAA0C,UAAA,SAAArB,OAAAjB,GAAAoB,KAAAkB,UAAA,SAAArB,OAAAsB,KAAAC,MAAAJ,GAAA,OAGXP,QAAAA,UAAAA,SAAAA,OADgBlC,GAFL,KAAA,EAAA,IAAA,MAAA,OAAA0C,EAAAb,WAOXQ,OAAAA,iBAAWE,QAAUP,WAkBzB9B,aAAaP,IAAKe,IAAIoC,MAAOlD,SAzBdmD,KAAA,SAAAtB,GAAA,MAAA,CAAAxB,KAAAI,QAAAoB,KAAAA,EAAA1B,QAAAC,SAAA8C,SAAAC,KAAA,SAAAf,GAAA,OAAAF,SAAA,mBAAAE,GAAAA,IAAAe,KAAA,SAAAC,GAAA,IAAAvB,EAAAuB,EAAAvB,KAAAxB,EAAA+C,EAAA/C,KAAAF,EAAAiD,EAAAjD,QAAA,OAAAyC,SAAAf,EAAAxB,EAAAF,KAyBf,MAzBe,SAAAkD,GAAAC,MAAA,0BAAAD","file":"app.min.js","sourcesContent":["/* Global Variables */\n\nlet docTitle = document.title;\n\nwindow.addEventListener(\"blur\", () => {\n  document.title = \"Come Back :(\";\n})\n\nwindow.addEventListener(\"focus\", () => {\n  document.title = docTitle;\n})\n\n\n// OpenWeatherApi configuration\nconst url = 'https://api.openweathermap.org/data/2.5/weather'\n// My Api Kay \nconst API_KEY= '50883ea96de0d5a374b6bd4583d75116'\n\n// HTML element to listen for click events\nconst button = document.getElementById('generate')\n\n// HTML elements to get the values\nconst zip = document.getElementById('zip')\nconst feelings = document.getElementById('feelings')\n\n// HTML elements to update dynamically\nconst date = document.getElementById('date')\nconst temp = document.getElementById('temp')\nconst content = document.getElementById('content')\n\n// Create a new date instance dynamically with JS\nlet d = new Date()\nlet newDate = d.getMonth() + '.' + d.getDate() + '.' + d.getFullYear()\n\n// Fetch Weather Data from OpenWeatherApi\nconst fetchWeather = async (baseURL, zip, apiKey) => {\n  try {\n    const api = await fetch(\n      `${baseURL}?zip=${zip},us&units=metric&APPID=${apiKey}`,\n    )\n    const result = await api.json()\n    // destructuring of the result object\n    const {\n      main: {temp},\n    } = result\n    return temp\n  } catch (e) {\n    throw e\n  }\n}\n\n// POST Request to store date, temp and user input\nconst saveData = async (path, data) => {\n  try {\n    await fetch(path, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n  } catch (e) {\n    throw e\n  }\n}\n\n// Update UI dynamically\nconst updateUI = async (temperature, newDate, feelings) => {\n  date.innerText = `Date: ${newDate}`\n  // Calculating temperature without a decimal number\n  temp.innerText = `Temp: ${Math.floor(temperature )} °C`\n  content.innerText = `Feel: ${feelings}`\n}\n\n// Event listener\nbutton.addEventListener('click', () => {\n  // The Result Of Click\n  fetchWeather(url, zip.value, API_KEY)\n    .then(temp => {\n      \n      return {date: newDate, temp, content: feelings.value}\n      \n    })\n    .then(data => {\n      saveData('/api/projectData', data)\n      return data\n    })\n    .then(({temp, date, content}) => updateUI(temp, date, content))\n    .catch(e => {\n      // There can be proper error handling with UI\n      // Error Massage Alert\n      alert('Please Enter Zip Code ♡', e)\n    })\n})"]}